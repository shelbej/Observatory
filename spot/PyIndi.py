# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyIndi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyIndi')
    _PyIndi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyIndi', [dirname(__file__)])
        except ImportError:
            import _PyIndi
            return _PyIndi
        try:
            _mod = imp.load_module('_PyIndi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyIndi = swig_import_helper()
    del swig_import_helper
else:
    from spot import _PyIndi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyIndi.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PyIndi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyIndi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyIndi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyIndi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyIndi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyIndi.SwigPyIterator_copy(self)

    def next(self):
        return _PyIndi.SwigPyIterator_next(self)

    def __next__(self):
        return _PyIndi.SwigPyIterator___next__(self)

    def previous(self):
        return _PyIndi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyIndi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyIndi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyIndi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyIndi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyIndi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyIndi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyIndi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PyIndi.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class BaseDeviceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseDeviceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseDeviceVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyIndi.BaseDeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyIndi.BaseDeviceVector___nonzero__(self)

    def __bool__(self):
        return _PyIndi.BaseDeviceVector___bool__(self)

    def __len__(self):
        return _PyIndi.BaseDeviceVector___len__(self)

    def __getslice__(self, i, j):
        return _PyIndi.BaseDeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyIndi.BaseDeviceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyIndi.BaseDeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyIndi.BaseDeviceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyIndi.BaseDeviceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyIndi.BaseDeviceVector___setitem__(self, *args)

    def pop(self):
        return _PyIndi.BaseDeviceVector_pop(self)

    def append(self, x):
        return _PyIndi.BaseDeviceVector_append(self, x)

    def empty(self):
        return _PyIndi.BaseDeviceVector_empty(self)

    def size(self):
        return _PyIndi.BaseDeviceVector_size(self)

    def swap(self, v):
        return _PyIndi.BaseDeviceVector_swap(self, v)

    def begin(self):
        return _PyIndi.BaseDeviceVector_begin(self)

    def end(self):
        return _PyIndi.BaseDeviceVector_end(self)

    def rbegin(self):
        return _PyIndi.BaseDeviceVector_rbegin(self)

    def rend(self):
        return _PyIndi.BaseDeviceVector_rend(self)

    def clear(self):
        return _PyIndi.BaseDeviceVector_clear(self)

    def get_allocator(self):
        return _PyIndi.BaseDeviceVector_get_allocator(self)

    def pop_back(self):
        return _PyIndi.BaseDeviceVector_pop_back(self)

    def erase(self, *args):
        return _PyIndi.BaseDeviceVector_erase(self, *args)

    def __init__(self, *args):
        this = _PyIndi.new_BaseDeviceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyIndi.BaseDeviceVector_push_back(self, x)

    def front(self):
        return _PyIndi.BaseDeviceVector_front(self)

    def back(self):
        return _PyIndi.BaseDeviceVector_back(self)

    def assign(self, n, x):
        return _PyIndi.BaseDeviceVector_assign(self, n, x)

    def resize(self, *args):
        return _PyIndi.BaseDeviceVector_resize(self, *args)

    def insert(self, *args):
        return _PyIndi.BaseDeviceVector_insert(self, *args)

    def reserve(self, n):
        return _PyIndi.BaseDeviceVector_reserve(self, n)

    def capacity(self):
        return _PyIndi.BaseDeviceVector_capacity(self)
    __swig_destroy__ = _PyIndi.delete_BaseDeviceVector
    __del__ = lambda self: None
BaseDeviceVector_swigregister = _PyIndi.BaseDeviceVector_swigregister
BaseDeviceVector_swigregister(BaseDeviceVector)

class PropertyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyIndi.PropertyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyIndi.PropertyVector___nonzero__(self)

    def __bool__(self):
        return _PyIndi.PropertyVector___bool__(self)

    def __len__(self):
        return _PyIndi.PropertyVector___len__(self)

    def __getslice__(self, i, j):
        return _PyIndi.PropertyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyIndi.PropertyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyIndi.PropertyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyIndi.PropertyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyIndi.PropertyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyIndi.PropertyVector___setitem__(self, *args)

    def pop(self):
        return _PyIndi.PropertyVector_pop(self)

    def append(self, x):
        return _PyIndi.PropertyVector_append(self, x)

    def empty(self):
        return _PyIndi.PropertyVector_empty(self)

    def size(self):
        return _PyIndi.PropertyVector_size(self)

    def swap(self, v):
        return _PyIndi.PropertyVector_swap(self, v)

    def begin(self):
        return _PyIndi.PropertyVector_begin(self)

    def end(self):
        return _PyIndi.PropertyVector_end(self)

    def rbegin(self):
        return _PyIndi.PropertyVector_rbegin(self)

    def rend(self):
        return _PyIndi.PropertyVector_rend(self)

    def clear(self):
        return _PyIndi.PropertyVector_clear(self)

    def get_allocator(self):
        return _PyIndi.PropertyVector_get_allocator(self)

    def pop_back(self):
        return _PyIndi.PropertyVector_pop_back(self)

    def erase(self, *args):
        return _PyIndi.PropertyVector_erase(self, *args)

    def __init__(self, *args):
        this = _PyIndi.new_PropertyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyIndi.PropertyVector_push_back(self, x)

    def front(self):
        return _PyIndi.PropertyVector_front(self)

    def back(self):
        return _PyIndi.PropertyVector_back(self)

    def assign(self, n, x):
        return _PyIndi.PropertyVector_assign(self, n, x)

    def resize(self, *args):
        return _PyIndi.PropertyVector_resize(self, *args)

    def insert(self, *args):
        return _PyIndi.PropertyVector_insert(self, *args)

    def reserve(self, n):
        return _PyIndi.PropertyVector_reserve(self, n)

    def capacity(self):
        return _PyIndi.PropertyVector_capacity(self)
    __swig_destroy__ = _PyIndi.delete_PropertyVector
    __del__ = lambda self: None
PropertyVector_swigregister = _PyIndi.PropertyVector_swigregister
PropertyVector_swigregister(PropertyVector)

INDI_NUMBER = _PyIndi.INDI_NUMBER
INDI_SWITCH = _PyIndi.INDI_SWITCH
INDI_TEXT = _PyIndi.INDI_TEXT
INDI_LIGHT = _PyIndi.INDI_LIGHT
INDI_BLOB = _PyIndi.INDI_BLOB
INDI_UNKNOWN = _PyIndi.INDI_UNKNOWN
AXIS_RA = _PyIndi.AXIS_RA
AXIS_DE = _PyIndi.AXIS_DE
AXIS_AZ = _PyIndi.AXIS_AZ
AXIS_ALT = _PyIndi.AXIS_ALT
DIRECTION_NORTH = _PyIndi.DIRECTION_NORTH
DIRECTION_SOUTH = _PyIndi.DIRECTION_SOUTH
DIRECTION_WEST = _PyIndi.DIRECTION_WEST
DIRECTION_EAST = _PyIndi.DIRECTION_EAST
INDI_DEVICE_NOT_FOUND = _PyIndi.INDI_DEVICE_NOT_FOUND
INDI_PROPERTY_INVALID = _PyIndi.INDI_PROPERTY_INVALID
INDI_PROPERTY_DUPLICATED = _PyIndi.INDI_PROPERTY_DUPLICATED
INDI_DISPATCH_ERROR = _PyIndi.INDI_DISPATCH_ERROR
INDI_MONO = _PyIndi.INDI_MONO
INDI_BAYER_RGGB = _PyIndi.INDI_BAYER_RGGB
INDI_BAYER_GRBG = _PyIndi.INDI_BAYER_GRBG
INDI_BAYER_GBRG = _PyIndi.INDI_BAYER_GBRG
INDI_BAYER_BGGR = _PyIndi.INDI_BAYER_BGGR
INDI_BAYER_CYYM = _PyIndi.INDI_BAYER_CYYM
INDI_BAYER_YCMY = _PyIndi.INDI_BAYER_YCMY
INDI_BAYER_YMCY = _PyIndi.INDI_BAYER_YMCY
INDI_BAYER_MYYC = _PyIndi.INDI_BAYER_MYYC
INDI_RGB = _PyIndi.INDI_RGB
INDI_BGR = _PyIndi.INDI_BGR
INDI_JPG = _PyIndi.INDI_JPG
MAXRBUF = _PyIndi.MAXRBUF
class BaseMediator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseMediator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseMediator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def newDevice(self, dp):
        return _PyIndi.BaseMediator_newDevice(self, dp)

    def removeDevice(self, dp):
        return _PyIndi.BaseMediator_removeDevice(self, dp)

    def newProperty(self, property):
        return _PyIndi.BaseMediator_newProperty(self, property)

    def removeProperty(self, property):
        return _PyIndi.BaseMediator_removeProperty(self, property)

    def newBLOB(self, bp):
        return _PyIndi.BaseMediator_newBLOB(self, bp)

    def newSwitch(self, svp):
        return _PyIndi.BaseMediator_newSwitch(self, svp)

    def newNumber(self, nvp):
        return _PyIndi.BaseMediator_newNumber(self, nvp)

    def newText(self, tvp):
        return _PyIndi.BaseMediator_newText(self, tvp)

    def newLight(self, lvp):
        return _PyIndi.BaseMediator_newLight(self, lvp)

    def newMessage(self, dp, messageID):
        return _PyIndi.BaseMediator_newMessage(self, dp, messageID)

    def serverConnected(self):
        return _PyIndi.BaseMediator_serverConnected(self)

    def serverDisconnected(self, exit_code):
        return _PyIndi.BaseMediator_serverDisconnected(self, exit_code)
    __swig_destroy__ = _PyIndi.delete_BaseMediator
    __del__ = lambda self: None
BaseMediator_swigregister = _PyIndi.BaseMediator_swigregister
BaseMediator_swigregister(BaseMediator)

INDIV = _PyIndi.INDIV
INDI_VERSION_MAJOR = _PyIndi.INDI_VERSION_MAJOR
INDI_VERSION_MINOR = _PyIndi.INDI_VERSION_MINOR
INDI_VERSION_RELEASE = _PyIndi.INDI_VERSION_RELEASE
ISS_OFF = _PyIndi.ISS_OFF
ISS_ON = _PyIndi.ISS_ON
IPS_IDLE = _PyIndi.IPS_IDLE
IPS_OK = _PyIndi.IPS_OK
IPS_BUSY = _PyIndi.IPS_BUSY
IPS_ALERT = _PyIndi.IPS_ALERT
ISR_1OFMANY = _PyIndi.ISR_1OFMANY
ISR_ATMOST1 = _PyIndi.ISR_ATMOST1
ISR_NOFMANY = _PyIndi.ISR_NOFMANY
IP_RO = _PyIndi.IP_RO
IP_WO = _PyIndi.IP_WO
IP_RW = _PyIndi.IP_RW
MAXINDINAME = _PyIndi.MAXINDINAME
MAXINDILABEL = _PyIndi.MAXINDILABEL
MAXINDIDEVICE = _PyIndi.MAXINDIDEVICE
MAXINDIGROUP = _PyIndi.MAXINDIGROUP
MAXINDIFORMAT = _PyIndi.MAXINDIFORMAT
MAXINDIBLOBFMT = _PyIndi.MAXINDIBLOBFMT
MAXINDITSTAMP = _PyIndi.MAXINDITSTAMP
MAXINDIMESSAGE = _PyIndi.MAXINDIMESSAGE
class IText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IText, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _PyIndi.IText_name_set
    __swig_getmethods__["name"] = _PyIndi.IText_name_get
    if _newclass:
        name = _swig_property(_PyIndi.IText_name_get, _PyIndi.IText_name_set)
    __swig_setmethods__["label"] = _PyIndi.IText_label_set
    __swig_getmethods__["label"] = _PyIndi.IText_label_get
    if _newclass:
        label = _swig_property(_PyIndi.IText_label_get, _PyIndi.IText_label_set)
    __swig_setmethods__["text"] = _PyIndi.IText_text_set
    __swig_getmethods__["text"] = _PyIndi.IText_text_get
    if _newclass:
        text = _swig_property(_PyIndi.IText_text_get, _PyIndi.IText_text_set)
    __swig_setmethods__["tvp"] = _PyIndi.IText_tvp_set
    __swig_getmethods__["tvp"] = _PyIndi.IText_tvp_get
    if _newclass:
        tvp = _swig_property(_PyIndi.IText_tvp_get, _PyIndi.IText_tvp_set)
    __swig_setmethods__["aux0"] = _PyIndi.IText_aux0_set
    __swig_getmethods__["aux0"] = _PyIndi.IText_aux0_get
    if _newclass:
        aux0 = _swig_property(_PyIndi.IText_aux0_get, _PyIndi.IText_aux0_set)
    __swig_setmethods__["aux1"] = _PyIndi.IText_aux1_set
    __swig_getmethods__["aux1"] = _PyIndi.IText_aux1_get
    if _newclass:
        aux1 = _swig_property(_PyIndi.IText_aux1_get, _PyIndi.IText_aux1_set)

    def __init__(self):
        this = _PyIndi.new_IText()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_IText
    __del__ = lambda self: None
IText_swigregister = _PyIndi.IText_swigregister
IText_swigregister(IText)

class ITextVectorProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITextVectorProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITextVectorProperty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _PyIndi.ITextVectorProperty_device_set
    __swig_getmethods__["device"] = _PyIndi.ITextVectorProperty_device_get
    if _newclass:
        device = _swig_property(_PyIndi.ITextVectorProperty_device_get, _PyIndi.ITextVectorProperty_device_set)
    __swig_setmethods__["name"] = _PyIndi.ITextVectorProperty_name_set
    __swig_getmethods__["name"] = _PyIndi.ITextVectorProperty_name_get
    if _newclass:
        name = _swig_property(_PyIndi.ITextVectorProperty_name_get, _PyIndi.ITextVectorProperty_name_set)
    __swig_setmethods__["label"] = _PyIndi.ITextVectorProperty_label_set
    __swig_getmethods__["label"] = _PyIndi.ITextVectorProperty_label_get
    if _newclass:
        label = _swig_property(_PyIndi.ITextVectorProperty_label_get, _PyIndi.ITextVectorProperty_label_set)
    __swig_setmethods__["group"] = _PyIndi.ITextVectorProperty_group_set
    __swig_getmethods__["group"] = _PyIndi.ITextVectorProperty_group_get
    if _newclass:
        group = _swig_property(_PyIndi.ITextVectorProperty_group_get, _PyIndi.ITextVectorProperty_group_set)
    __swig_setmethods__["p"] = _PyIndi.ITextVectorProperty_p_set
    __swig_getmethods__["p"] = _PyIndi.ITextVectorProperty_p_get
    if _newclass:
        p = _swig_property(_PyIndi.ITextVectorProperty_p_get, _PyIndi.ITextVectorProperty_p_set)
    __swig_setmethods__["timeout"] = _PyIndi.ITextVectorProperty_timeout_set
    __swig_getmethods__["timeout"] = _PyIndi.ITextVectorProperty_timeout_get
    if _newclass:
        timeout = _swig_property(_PyIndi.ITextVectorProperty_timeout_get, _PyIndi.ITextVectorProperty_timeout_set)
    __swig_setmethods__["s"] = _PyIndi.ITextVectorProperty_s_set
    __swig_getmethods__["s"] = _PyIndi.ITextVectorProperty_s_get
    if _newclass:
        s = _swig_property(_PyIndi.ITextVectorProperty_s_get, _PyIndi.ITextVectorProperty_s_set)
    __swig_setmethods__["tp"] = _PyIndi.ITextVectorProperty_tp_set
    __swig_getmethods__["tp"] = _PyIndi.ITextVectorProperty_tp_get
    if _newclass:
        tp = _swig_property(_PyIndi.ITextVectorProperty_tp_get, _PyIndi.ITextVectorProperty_tp_set)
    __swig_setmethods__["ntp"] = _PyIndi.ITextVectorProperty_ntp_set
    __swig_getmethods__["ntp"] = _PyIndi.ITextVectorProperty_ntp_get
    if _newclass:
        ntp = _swig_property(_PyIndi.ITextVectorProperty_ntp_get, _PyIndi.ITextVectorProperty_ntp_set)
    __swig_setmethods__["timestamp"] = _PyIndi.ITextVectorProperty_timestamp_set
    __swig_getmethods__["timestamp"] = _PyIndi.ITextVectorProperty_timestamp_get
    if _newclass:
        timestamp = _swig_property(_PyIndi.ITextVectorProperty_timestamp_get, _PyIndi.ITextVectorProperty_timestamp_set)
    __swig_setmethods__["aux"] = _PyIndi.ITextVectorProperty_aux_set
    __swig_getmethods__["aux"] = _PyIndi.ITextVectorProperty_aux_get
    if _newclass:
        aux = _swig_property(_PyIndi.ITextVectorProperty_aux_get, _PyIndi.ITextVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.ITextVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.ITextVectorProperty___len__(self)

    def __init__(self):
        this = _PyIndi.new_ITextVectorProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_ITextVectorProperty
    __del__ = lambda self: None
ITextVectorProperty_swigregister = _PyIndi.ITextVectorProperty_swigregister
ITextVectorProperty_swigregister(ITextVectorProperty)

class INumber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INumber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INumber, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _PyIndi.INumber_name_set
    __swig_getmethods__["name"] = _PyIndi.INumber_name_get
    if _newclass:
        name = _swig_property(_PyIndi.INumber_name_get, _PyIndi.INumber_name_set)
    __swig_setmethods__["label"] = _PyIndi.INumber_label_set
    __swig_getmethods__["label"] = _PyIndi.INumber_label_get
    if _newclass:
        label = _swig_property(_PyIndi.INumber_label_get, _PyIndi.INumber_label_set)
    __swig_setmethods__["format"] = _PyIndi.INumber_format_set
    __swig_getmethods__["format"] = _PyIndi.INumber_format_get
    if _newclass:
        format = _swig_property(_PyIndi.INumber_format_get, _PyIndi.INumber_format_set)
    __swig_setmethods__["min"] = _PyIndi.INumber_min_set
    __swig_getmethods__["min"] = _PyIndi.INumber_min_get
    if _newclass:
        min = _swig_property(_PyIndi.INumber_min_get, _PyIndi.INumber_min_set)
    __swig_setmethods__["max"] = _PyIndi.INumber_max_set
    __swig_getmethods__["max"] = _PyIndi.INumber_max_get
    if _newclass:
        max = _swig_property(_PyIndi.INumber_max_get, _PyIndi.INumber_max_set)
    __swig_setmethods__["step"] = _PyIndi.INumber_step_set
    __swig_getmethods__["step"] = _PyIndi.INumber_step_get
    if _newclass:
        step = _swig_property(_PyIndi.INumber_step_get, _PyIndi.INumber_step_set)
    __swig_setmethods__["value"] = _PyIndi.INumber_value_set
    __swig_getmethods__["value"] = _PyIndi.INumber_value_get
    if _newclass:
        value = _swig_property(_PyIndi.INumber_value_get, _PyIndi.INumber_value_set)
    __swig_setmethods__["nvp"] = _PyIndi.INumber_nvp_set
    __swig_getmethods__["nvp"] = _PyIndi.INumber_nvp_get
    if _newclass:
        nvp = _swig_property(_PyIndi.INumber_nvp_get, _PyIndi.INumber_nvp_set)
    __swig_setmethods__["aux0"] = _PyIndi.INumber_aux0_set
    __swig_getmethods__["aux0"] = _PyIndi.INumber_aux0_get
    if _newclass:
        aux0 = _swig_property(_PyIndi.INumber_aux0_get, _PyIndi.INumber_aux0_set)
    __swig_setmethods__["aux1"] = _PyIndi.INumber_aux1_set
    __swig_getmethods__["aux1"] = _PyIndi.INumber_aux1_get
    if _newclass:
        aux1 = _swig_property(_PyIndi.INumber_aux1_get, _PyIndi.INumber_aux1_set)

    def __init__(self):
        this = _PyIndi.new_INumber()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_INumber
    __del__ = lambda self: None
INumber_swigregister = _PyIndi.INumber_swigregister
INumber_swigregister(INumber)

class INumberVectorProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INumberVectorProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INumberVectorProperty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _PyIndi.INumberVectorProperty_device_set
    __swig_getmethods__["device"] = _PyIndi.INumberVectorProperty_device_get
    if _newclass:
        device = _swig_property(_PyIndi.INumberVectorProperty_device_get, _PyIndi.INumberVectorProperty_device_set)
    __swig_setmethods__["name"] = _PyIndi.INumberVectorProperty_name_set
    __swig_getmethods__["name"] = _PyIndi.INumberVectorProperty_name_get
    if _newclass:
        name = _swig_property(_PyIndi.INumberVectorProperty_name_get, _PyIndi.INumberVectorProperty_name_set)
    __swig_setmethods__["label"] = _PyIndi.INumberVectorProperty_label_set
    __swig_getmethods__["label"] = _PyIndi.INumberVectorProperty_label_get
    if _newclass:
        label = _swig_property(_PyIndi.INumberVectorProperty_label_get, _PyIndi.INumberVectorProperty_label_set)
    __swig_setmethods__["group"] = _PyIndi.INumberVectorProperty_group_set
    __swig_getmethods__["group"] = _PyIndi.INumberVectorProperty_group_get
    if _newclass:
        group = _swig_property(_PyIndi.INumberVectorProperty_group_get, _PyIndi.INumberVectorProperty_group_set)
    __swig_setmethods__["p"] = _PyIndi.INumberVectorProperty_p_set
    __swig_getmethods__["p"] = _PyIndi.INumberVectorProperty_p_get
    if _newclass:
        p = _swig_property(_PyIndi.INumberVectorProperty_p_get, _PyIndi.INumberVectorProperty_p_set)
    __swig_setmethods__["timeout"] = _PyIndi.INumberVectorProperty_timeout_set
    __swig_getmethods__["timeout"] = _PyIndi.INumberVectorProperty_timeout_get
    if _newclass:
        timeout = _swig_property(_PyIndi.INumberVectorProperty_timeout_get, _PyIndi.INumberVectorProperty_timeout_set)
    __swig_setmethods__["s"] = _PyIndi.INumberVectorProperty_s_set
    __swig_getmethods__["s"] = _PyIndi.INumberVectorProperty_s_get
    if _newclass:
        s = _swig_property(_PyIndi.INumberVectorProperty_s_get, _PyIndi.INumberVectorProperty_s_set)
    __swig_setmethods__["np"] = _PyIndi.INumberVectorProperty_np_set
    __swig_getmethods__["np"] = _PyIndi.INumberVectorProperty_np_get
    if _newclass:
        np = _swig_property(_PyIndi.INumberVectorProperty_np_get, _PyIndi.INumberVectorProperty_np_set)
    __swig_setmethods__["nnp"] = _PyIndi.INumberVectorProperty_nnp_set
    __swig_getmethods__["nnp"] = _PyIndi.INumberVectorProperty_nnp_get
    if _newclass:
        nnp = _swig_property(_PyIndi.INumberVectorProperty_nnp_get, _PyIndi.INumberVectorProperty_nnp_set)
    __swig_setmethods__["timestamp"] = _PyIndi.INumberVectorProperty_timestamp_set
    __swig_getmethods__["timestamp"] = _PyIndi.INumberVectorProperty_timestamp_get
    if _newclass:
        timestamp = _swig_property(_PyIndi.INumberVectorProperty_timestamp_get, _PyIndi.INumberVectorProperty_timestamp_set)
    __swig_setmethods__["aux"] = _PyIndi.INumberVectorProperty_aux_set
    __swig_getmethods__["aux"] = _PyIndi.INumberVectorProperty_aux_get
    if _newclass:
        aux = _swig_property(_PyIndi.INumberVectorProperty_aux_get, _PyIndi.INumberVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.INumberVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.INumberVectorProperty___len__(self)

    def __init__(self):
        this = _PyIndi.new_INumberVectorProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_INumberVectorProperty
    __del__ = lambda self: None
INumberVectorProperty_swigregister = _PyIndi.INumberVectorProperty_swigregister
INumberVectorProperty_swigregister(INumberVectorProperty)

class ISwitch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISwitch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISwitch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _PyIndi.ISwitch_name_set
    __swig_getmethods__["name"] = _PyIndi.ISwitch_name_get
    if _newclass:
        name = _swig_property(_PyIndi.ISwitch_name_get, _PyIndi.ISwitch_name_set)
    __swig_setmethods__["label"] = _PyIndi.ISwitch_label_set
    __swig_getmethods__["label"] = _PyIndi.ISwitch_label_get
    if _newclass:
        label = _swig_property(_PyIndi.ISwitch_label_get, _PyIndi.ISwitch_label_set)
    __swig_setmethods__["s"] = _PyIndi.ISwitch_s_set
    __swig_getmethods__["s"] = _PyIndi.ISwitch_s_get
    if _newclass:
        s = _swig_property(_PyIndi.ISwitch_s_get, _PyIndi.ISwitch_s_set)
    __swig_setmethods__["svp"] = _PyIndi.ISwitch_svp_set
    __swig_getmethods__["svp"] = _PyIndi.ISwitch_svp_get
    if _newclass:
        svp = _swig_property(_PyIndi.ISwitch_svp_get, _PyIndi.ISwitch_svp_set)
    __swig_setmethods__["aux"] = _PyIndi.ISwitch_aux_set
    __swig_getmethods__["aux"] = _PyIndi.ISwitch_aux_get
    if _newclass:
        aux = _swig_property(_PyIndi.ISwitch_aux_get, _PyIndi.ISwitch_aux_set)

    def __init__(self):
        this = _PyIndi.new_ISwitch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_ISwitch
    __del__ = lambda self: None
ISwitch_swigregister = _PyIndi.ISwitch_swigregister
ISwitch_swigregister(ISwitch)

class ISwitchVectorProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISwitchVectorProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISwitchVectorProperty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _PyIndi.ISwitchVectorProperty_device_set
    __swig_getmethods__["device"] = _PyIndi.ISwitchVectorProperty_device_get
    if _newclass:
        device = _swig_property(_PyIndi.ISwitchVectorProperty_device_get, _PyIndi.ISwitchVectorProperty_device_set)
    __swig_setmethods__["name"] = _PyIndi.ISwitchVectorProperty_name_set
    __swig_getmethods__["name"] = _PyIndi.ISwitchVectorProperty_name_get
    if _newclass:
        name = _swig_property(_PyIndi.ISwitchVectorProperty_name_get, _PyIndi.ISwitchVectorProperty_name_set)
    __swig_setmethods__["label"] = _PyIndi.ISwitchVectorProperty_label_set
    __swig_getmethods__["label"] = _PyIndi.ISwitchVectorProperty_label_get
    if _newclass:
        label = _swig_property(_PyIndi.ISwitchVectorProperty_label_get, _PyIndi.ISwitchVectorProperty_label_set)
    __swig_setmethods__["group"] = _PyIndi.ISwitchVectorProperty_group_set
    __swig_getmethods__["group"] = _PyIndi.ISwitchVectorProperty_group_get
    if _newclass:
        group = _swig_property(_PyIndi.ISwitchVectorProperty_group_get, _PyIndi.ISwitchVectorProperty_group_set)
    __swig_setmethods__["p"] = _PyIndi.ISwitchVectorProperty_p_set
    __swig_getmethods__["p"] = _PyIndi.ISwitchVectorProperty_p_get
    if _newclass:
        p = _swig_property(_PyIndi.ISwitchVectorProperty_p_get, _PyIndi.ISwitchVectorProperty_p_set)
    __swig_setmethods__["r"] = _PyIndi.ISwitchVectorProperty_r_set
    __swig_getmethods__["r"] = _PyIndi.ISwitchVectorProperty_r_get
    if _newclass:
        r = _swig_property(_PyIndi.ISwitchVectorProperty_r_get, _PyIndi.ISwitchVectorProperty_r_set)
    __swig_setmethods__["timeout"] = _PyIndi.ISwitchVectorProperty_timeout_set
    __swig_getmethods__["timeout"] = _PyIndi.ISwitchVectorProperty_timeout_get
    if _newclass:
        timeout = _swig_property(_PyIndi.ISwitchVectorProperty_timeout_get, _PyIndi.ISwitchVectorProperty_timeout_set)
    __swig_setmethods__["s"] = _PyIndi.ISwitchVectorProperty_s_set
    __swig_getmethods__["s"] = _PyIndi.ISwitchVectorProperty_s_get
    if _newclass:
        s = _swig_property(_PyIndi.ISwitchVectorProperty_s_get, _PyIndi.ISwitchVectorProperty_s_set)
    __swig_setmethods__["sp"] = _PyIndi.ISwitchVectorProperty_sp_set
    __swig_getmethods__["sp"] = _PyIndi.ISwitchVectorProperty_sp_get
    if _newclass:
        sp = _swig_property(_PyIndi.ISwitchVectorProperty_sp_get, _PyIndi.ISwitchVectorProperty_sp_set)
    __swig_setmethods__["nsp"] = _PyIndi.ISwitchVectorProperty_nsp_set
    __swig_getmethods__["nsp"] = _PyIndi.ISwitchVectorProperty_nsp_get
    if _newclass:
        nsp = _swig_property(_PyIndi.ISwitchVectorProperty_nsp_get, _PyIndi.ISwitchVectorProperty_nsp_set)
    __swig_setmethods__["timestamp"] = _PyIndi.ISwitchVectorProperty_timestamp_set
    __swig_getmethods__["timestamp"] = _PyIndi.ISwitchVectorProperty_timestamp_get
    if _newclass:
        timestamp = _swig_property(_PyIndi.ISwitchVectorProperty_timestamp_get, _PyIndi.ISwitchVectorProperty_timestamp_set)
    __swig_setmethods__["aux"] = _PyIndi.ISwitchVectorProperty_aux_set
    __swig_getmethods__["aux"] = _PyIndi.ISwitchVectorProperty_aux_get
    if _newclass:
        aux = _swig_property(_PyIndi.ISwitchVectorProperty_aux_get, _PyIndi.ISwitchVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.ISwitchVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.ISwitchVectorProperty___len__(self)

    def __init__(self):
        this = _PyIndi.new_ISwitchVectorProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_ISwitchVectorProperty
    __del__ = lambda self: None
ISwitchVectorProperty_swigregister = _PyIndi.ISwitchVectorProperty_swigregister
ISwitchVectorProperty_swigregister(ISwitchVectorProperty)

class ILight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILight, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _PyIndi.ILight_name_set
    __swig_getmethods__["name"] = _PyIndi.ILight_name_get
    if _newclass:
        name = _swig_property(_PyIndi.ILight_name_get, _PyIndi.ILight_name_set)
    __swig_setmethods__["label"] = _PyIndi.ILight_label_set
    __swig_getmethods__["label"] = _PyIndi.ILight_label_get
    if _newclass:
        label = _swig_property(_PyIndi.ILight_label_get, _PyIndi.ILight_label_set)
    __swig_setmethods__["s"] = _PyIndi.ILight_s_set
    __swig_getmethods__["s"] = _PyIndi.ILight_s_get
    if _newclass:
        s = _swig_property(_PyIndi.ILight_s_get, _PyIndi.ILight_s_set)
    __swig_setmethods__["lvp"] = _PyIndi.ILight_lvp_set
    __swig_getmethods__["lvp"] = _PyIndi.ILight_lvp_get
    if _newclass:
        lvp = _swig_property(_PyIndi.ILight_lvp_get, _PyIndi.ILight_lvp_set)
    __swig_setmethods__["aux"] = _PyIndi.ILight_aux_set
    __swig_getmethods__["aux"] = _PyIndi.ILight_aux_get
    if _newclass:
        aux = _swig_property(_PyIndi.ILight_aux_get, _PyIndi.ILight_aux_set)

    def __init__(self):
        this = _PyIndi.new_ILight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_ILight
    __del__ = lambda self: None
ILight_swigregister = _PyIndi.ILight_swigregister
ILight_swigregister(ILight)

class ILightVectorProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILightVectorProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILightVectorProperty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _PyIndi.ILightVectorProperty_device_set
    __swig_getmethods__["device"] = _PyIndi.ILightVectorProperty_device_get
    if _newclass:
        device = _swig_property(_PyIndi.ILightVectorProperty_device_get, _PyIndi.ILightVectorProperty_device_set)
    __swig_setmethods__["name"] = _PyIndi.ILightVectorProperty_name_set
    __swig_getmethods__["name"] = _PyIndi.ILightVectorProperty_name_get
    if _newclass:
        name = _swig_property(_PyIndi.ILightVectorProperty_name_get, _PyIndi.ILightVectorProperty_name_set)
    __swig_setmethods__["label"] = _PyIndi.ILightVectorProperty_label_set
    __swig_getmethods__["label"] = _PyIndi.ILightVectorProperty_label_get
    if _newclass:
        label = _swig_property(_PyIndi.ILightVectorProperty_label_get, _PyIndi.ILightVectorProperty_label_set)
    __swig_setmethods__["group"] = _PyIndi.ILightVectorProperty_group_set
    __swig_getmethods__["group"] = _PyIndi.ILightVectorProperty_group_get
    if _newclass:
        group = _swig_property(_PyIndi.ILightVectorProperty_group_get, _PyIndi.ILightVectorProperty_group_set)
    __swig_setmethods__["s"] = _PyIndi.ILightVectorProperty_s_set
    __swig_getmethods__["s"] = _PyIndi.ILightVectorProperty_s_get
    if _newclass:
        s = _swig_property(_PyIndi.ILightVectorProperty_s_get, _PyIndi.ILightVectorProperty_s_set)
    __swig_setmethods__["lp"] = _PyIndi.ILightVectorProperty_lp_set
    __swig_getmethods__["lp"] = _PyIndi.ILightVectorProperty_lp_get
    if _newclass:
        lp = _swig_property(_PyIndi.ILightVectorProperty_lp_get, _PyIndi.ILightVectorProperty_lp_set)
    __swig_setmethods__["nlp"] = _PyIndi.ILightVectorProperty_nlp_set
    __swig_getmethods__["nlp"] = _PyIndi.ILightVectorProperty_nlp_get
    if _newclass:
        nlp = _swig_property(_PyIndi.ILightVectorProperty_nlp_get, _PyIndi.ILightVectorProperty_nlp_set)
    __swig_setmethods__["timestamp"] = _PyIndi.ILightVectorProperty_timestamp_set
    __swig_getmethods__["timestamp"] = _PyIndi.ILightVectorProperty_timestamp_get
    if _newclass:
        timestamp = _swig_property(_PyIndi.ILightVectorProperty_timestamp_get, _PyIndi.ILightVectorProperty_timestamp_set)
    __swig_setmethods__["aux"] = _PyIndi.ILightVectorProperty_aux_set
    __swig_getmethods__["aux"] = _PyIndi.ILightVectorProperty_aux_get
    if _newclass:
        aux = _swig_property(_PyIndi.ILightVectorProperty_aux_get, _PyIndi.ILightVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.ILightVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.ILightVectorProperty___len__(self)

    def __init__(self):
        this = _PyIndi.new_ILightVectorProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_ILightVectorProperty
    __del__ = lambda self: None
ILightVectorProperty_swigregister = _PyIndi.ILightVectorProperty_swigregister
ILightVectorProperty_swigregister(ILightVectorProperty)

class IBLOB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBLOB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBLOB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _PyIndi.IBLOB_name_set
    __swig_getmethods__["name"] = _PyIndi.IBLOB_name_get
    if _newclass:
        name = _swig_property(_PyIndi.IBLOB_name_get, _PyIndi.IBLOB_name_set)
    __swig_setmethods__["label"] = _PyIndi.IBLOB_label_set
    __swig_getmethods__["label"] = _PyIndi.IBLOB_label_get
    if _newclass:
        label = _swig_property(_PyIndi.IBLOB_label_get, _PyIndi.IBLOB_label_set)
    __swig_setmethods__["format"] = _PyIndi.IBLOB_format_set
    __swig_getmethods__["format"] = _PyIndi.IBLOB_format_get
    if _newclass:
        format = _swig_property(_PyIndi.IBLOB_format_get, _PyIndi.IBLOB_format_set)
    __swig_setmethods__["blob"] = _PyIndi.IBLOB_blob_set
    __swig_getmethods__["blob"] = _PyIndi.IBLOB_blob_get
    if _newclass:
        blob = _swig_property(_PyIndi.IBLOB_blob_get, _PyIndi.IBLOB_blob_set)
    __swig_setmethods__["bloblen"] = _PyIndi.IBLOB_bloblen_set
    __swig_getmethods__["bloblen"] = _PyIndi.IBLOB_bloblen_get
    if _newclass:
        bloblen = _swig_property(_PyIndi.IBLOB_bloblen_get, _PyIndi.IBLOB_bloblen_set)
    __swig_setmethods__["size"] = _PyIndi.IBLOB_size_set
    __swig_getmethods__["size"] = _PyIndi.IBLOB_size_get
    if _newclass:
        size = _swig_property(_PyIndi.IBLOB_size_get, _PyIndi.IBLOB_size_set)
    __swig_setmethods__["bvp"] = _PyIndi.IBLOB_bvp_set
    __swig_getmethods__["bvp"] = _PyIndi.IBLOB_bvp_get
    if _newclass:
        bvp = _swig_property(_PyIndi.IBLOB_bvp_get, _PyIndi.IBLOB_bvp_set)
    __swig_setmethods__["aux0"] = _PyIndi.IBLOB_aux0_set
    __swig_getmethods__["aux0"] = _PyIndi.IBLOB_aux0_get
    if _newclass:
        aux0 = _swig_property(_PyIndi.IBLOB_aux0_get, _PyIndi.IBLOB_aux0_set)
    __swig_setmethods__["aux1"] = _PyIndi.IBLOB_aux1_set
    __swig_getmethods__["aux1"] = _PyIndi.IBLOB_aux1_get
    if _newclass:
        aux1 = _swig_property(_PyIndi.IBLOB_aux1_get, _PyIndi.IBLOB_aux1_set)
    __swig_setmethods__["aux2"] = _PyIndi.IBLOB_aux2_set
    __swig_getmethods__["aux2"] = _PyIndi.IBLOB_aux2_get
    if _newclass:
        aux2 = _swig_property(_PyIndi.IBLOB_aux2_get, _PyIndi.IBLOB_aux2_set)

    def getblobdata(self):
        return _PyIndi.IBLOB_getblobdata(self)

    def __init__(self):
        this = _PyIndi.new_IBLOB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_IBLOB
    __del__ = lambda self: None
IBLOB_swigregister = _PyIndi.IBLOB_swigregister
IBLOB_swigregister(IBLOB)

class IBLOBVectorProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBLOBVectorProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBLOBVectorProperty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _PyIndi.IBLOBVectorProperty_device_set
    __swig_getmethods__["device"] = _PyIndi.IBLOBVectorProperty_device_get
    if _newclass:
        device = _swig_property(_PyIndi.IBLOBVectorProperty_device_get, _PyIndi.IBLOBVectorProperty_device_set)
    __swig_setmethods__["name"] = _PyIndi.IBLOBVectorProperty_name_set
    __swig_getmethods__["name"] = _PyIndi.IBLOBVectorProperty_name_get
    if _newclass:
        name = _swig_property(_PyIndi.IBLOBVectorProperty_name_get, _PyIndi.IBLOBVectorProperty_name_set)
    __swig_setmethods__["label"] = _PyIndi.IBLOBVectorProperty_label_set
    __swig_getmethods__["label"] = _PyIndi.IBLOBVectorProperty_label_get
    if _newclass:
        label = _swig_property(_PyIndi.IBLOBVectorProperty_label_get, _PyIndi.IBLOBVectorProperty_label_set)
    __swig_setmethods__["group"] = _PyIndi.IBLOBVectorProperty_group_set
    __swig_getmethods__["group"] = _PyIndi.IBLOBVectorProperty_group_get
    if _newclass:
        group = _swig_property(_PyIndi.IBLOBVectorProperty_group_get, _PyIndi.IBLOBVectorProperty_group_set)
    __swig_setmethods__["p"] = _PyIndi.IBLOBVectorProperty_p_set
    __swig_getmethods__["p"] = _PyIndi.IBLOBVectorProperty_p_get
    if _newclass:
        p = _swig_property(_PyIndi.IBLOBVectorProperty_p_get, _PyIndi.IBLOBVectorProperty_p_set)
    __swig_setmethods__["timeout"] = _PyIndi.IBLOBVectorProperty_timeout_set
    __swig_getmethods__["timeout"] = _PyIndi.IBLOBVectorProperty_timeout_get
    if _newclass:
        timeout = _swig_property(_PyIndi.IBLOBVectorProperty_timeout_get, _PyIndi.IBLOBVectorProperty_timeout_set)
    __swig_setmethods__["s"] = _PyIndi.IBLOBVectorProperty_s_set
    __swig_getmethods__["s"] = _PyIndi.IBLOBVectorProperty_s_get
    if _newclass:
        s = _swig_property(_PyIndi.IBLOBVectorProperty_s_get, _PyIndi.IBLOBVectorProperty_s_set)
    __swig_setmethods__["bp"] = _PyIndi.IBLOBVectorProperty_bp_set
    __swig_getmethods__["bp"] = _PyIndi.IBLOBVectorProperty_bp_get
    if _newclass:
        bp = _swig_property(_PyIndi.IBLOBVectorProperty_bp_get, _PyIndi.IBLOBVectorProperty_bp_set)
    __swig_setmethods__["nbp"] = _PyIndi.IBLOBVectorProperty_nbp_set
    __swig_getmethods__["nbp"] = _PyIndi.IBLOBVectorProperty_nbp_get
    if _newclass:
        nbp = _swig_property(_PyIndi.IBLOBVectorProperty_nbp_get, _PyIndi.IBLOBVectorProperty_nbp_set)
    __swig_setmethods__["timestamp"] = _PyIndi.IBLOBVectorProperty_timestamp_set
    __swig_getmethods__["timestamp"] = _PyIndi.IBLOBVectorProperty_timestamp_get
    if _newclass:
        timestamp = _swig_property(_PyIndi.IBLOBVectorProperty_timestamp_get, _PyIndi.IBLOBVectorProperty_timestamp_set)
    __swig_setmethods__["aux"] = _PyIndi.IBLOBVectorProperty_aux_set
    __swig_getmethods__["aux"] = _PyIndi.IBLOBVectorProperty_aux_get
    if _newclass:
        aux = _swig_property(_PyIndi.IBLOBVectorProperty_aux_get, _PyIndi.IBLOBVectorProperty_aux_set)

    def __getitem__(self, index):
        return _PyIndi.IBLOBVectorProperty___getitem__(self, index)

    def __len__(self):
        return _PyIndi.IBLOBVectorProperty___len__(self)

    def __init__(self):
        this = _PyIndi.new_IBLOBVectorProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_IBLOBVectorProperty
    __del__ = lambda self: None
IBLOBVectorProperty_swigregister = _PyIndi.IBLOBVectorProperty_swigregister
IBLOBVectorProperty_swigregister(IBLOBVectorProperty)

class BaseClient(BaseMediator):
    __swig_setmethods__ = {}
    for _s in [BaseMediator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseClient, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMediator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseClient, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == BaseClient:
            _self = None
        else:
            _self = self
        this = _PyIndi.new_BaseClient(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_BaseClient
    __del__ = lambda self: None

    def setServer(self, hostname, port):
        return _PyIndi.BaseClient_setServer(self, hostname, port)

    def watchDevice(self, deviceName):
        return _PyIndi.BaseClient_watchDevice(self, deviceName)

    def connectServer(self):
        return _PyIndi.BaseClient_connectServer(self)

    def disconnectServer(self):
        return _PyIndi.BaseClient_disconnectServer(self)

    def isServerConnected(self):
        return _PyIndi.BaseClient_isServerConnected(self)

    def connectDevice(self, deviceName):
        return _PyIndi.BaseClient_connectDevice(self, deviceName)

    def disconnectDevice(self, deviceName):
        return _PyIndi.BaseClient_disconnectDevice(self, deviceName)

    def getDevice(self, deviceName):
        return _PyIndi.BaseClient_getDevice(self, deviceName)

    def getDevices(self, *args):
        return _PyIndi.BaseClient_getDevices(self, *args)

    def setBLOBMode(self, blobH, dev, prop=None):
        return _PyIndi.BaseClient_setBLOBMode(self, blobH, dev, prop)

    def getBLOBMode(self, dev, prop=None):
        return _PyIndi.BaseClient_getBLOBMode(self, dev, prop)
    if _newclass:
        listenHelper = staticmethod(_PyIndi.BaseClient_listenHelper)
    else:
        listenHelper = _PyIndi.BaseClient_listenHelper

    def getHost(self):
        return _PyIndi.BaseClient_getHost(self)

    def getPort(self):
        return _PyIndi.BaseClient_getPort(self)

    def sendNewText(self, *args):
        return _PyIndi.BaseClient_sendNewText(self, *args)

    def sendNewNumber(self, *args):
        return _PyIndi.BaseClient_sendNewNumber(self, *args)

    def sendNewSwitch(self, *args):
        return _PyIndi.BaseClient_sendNewSwitch(self, *args)

    def startBlob(self, devName, propName, timestamp):
        return _PyIndi.BaseClient_startBlob(self, devName, propName, timestamp)

    def sendOneBlob(self, *args):
        return _PyIndi.BaseClient_sendOneBlob(self, *args)

    def finishBlob(self):
        return _PyIndi.BaseClient_finishBlob(self)

    def setVerbose(self, enable):
        return _PyIndi.BaseClient_setVerbose(self, enable)

    def isVerbose(self):
        return _PyIndi.BaseClient_isVerbose(self)

    def setConnectionTimeout(self, seconds, microseconds):
        return _PyIndi.BaseClient_setConnectionTimeout(self, seconds, microseconds)

    def newUniversalMessage(self, message):
        return _PyIndi.BaseClient_newUniversalMessage(self, message)
    def __disown__(self):
        self.this.disown()
        _PyIndi.disown_BaseClient(self)
        return weakref_proxy(self)
BaseClient_swigregister = _PyIndi.BaseClient_swigregister
BaseClient_swigregister(BaseClient)

def BaseClient_listenHelper(context):
    return _PyIndi.BaseClient_listenHelper(context)
BaseClient_listenHelper = _PyIndi.BaseClient_listenHelper

class BaseDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseDevice, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyIndi.new_BaseDevice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_BaseDevice
    __del__ = lambda self: None
    INDI_DEVICE_NOT_FOUND = _PyIndi.BaseDevice_INDI_DEVICE_NOT_FOUND
    INDI_PROPERTY_INVALID = _PyIndi.BaseDevice_INDI_PROPERTY_INVALID
    INDI_PROPERTY_DUPLICATED = _PyIndi.BaseDevice_INDI_PROPERTY_DUPLICATED
    INDI_DISPATCH_ERROR = _PyIndi.BaseDevice_INDI_DISPATCH_ERROR
    GENERAL_INTERFACE = _PyIndi.BaseDevice_GENERAL_INTERFACE
    TELESCOPE_INTERFACE = _PyIndi.BaseDevice_TELESCOPE_INTERFACE
    CCD_INTERFACE = _PyIndi.BaseDevice_CCD_INTERFACE
    GUIDER_INTERFACE = _PyIndi.BaseDevice_GUIDER_INTERFACE
    FOCUSER_INTERFACE = _PyIndi.BaseDevice_FOCUSER_INTERFACE
    FILTER_INTERFACE = _PyIndi.BaseDevice_FILTER_INTERFACE
    DOME_INTERFACE = _PyIndi.BaseDevice_DOME_INTERFACE
    GPS_INTERFACE = _PyIndi.BaseDevice_GPS_INTERFACE
    WEATHER_INTERFACE = _PyIndi.BaseDevice_WEATHER_INTERFACE
    AO_INTERFACE = _PyIndi.BaseDevice_AO_INTERFACE
    DUSTCAP_INTERFACE = _PyIndi.BaseDevice_DUSTCAP_INTERFACE
    LIGHTBOX_INTERFACE = _PyIndi.BaseDevice_LIGHTBOX_INTERFACE
    DETECTOR_INTERFACE = _PyIndi.BaseDevice_DETECTOR_INTERFACE
    ROTATOR_INTERFACE = _PyIndi.BaseDevice_ROTATOR_INTERFACE
    AUX_INTERFACE = _PyIndi.BaseDevice_AUX_INTERFACE

    def getNumber(self, name):
        return _PyIndi.BaseDevice_getNumber(self, name)

    def getText(self, name):
        return _PyIndi.BaseDevice_getText(self, name)

    def getSwitch(self, name):
        return _PyIndi.BaseDevice_getSwitch(self, name)

    def getLight(self, name):
        return _PyIndi.BaseDevice_getLight(self, name)

    def getBLOB(self, name):
        return _PyIndi.BaseDevice_getBLOB(self, name)

    def getPropertyState(self, name):
        return _PyIndi.BaseDevice_getPropertyState(self, name)

    def getPropertyPermission(self, name):
        return _PyIndi.BaseDevice_getPropertyPermission(self, name)

    def registerProperty(self, p, type):
        return _PyIndi.BaseDevice_registerProperty(self, p, type)

    def removeProperty(self, name, errmsg):
        return _PyIndi.BaseDevice_removeProperty(self, name, errmsg)

    def getRawProperty(self, name, type=INDI_UNKNOWN):
        return _PyIndi.BaseDevice_getRawProperty(self, name, type)

    def getProperty(self, name, type=INDI_UNKNOWN):
        return _PyIndi.BaseDevice_getProperty(self, name, type)

    def getProperties(self):
        return _PyIndi.BaseDevice_getProperties(self)

    def buildSkeleton(self, filename):
        return _PyIndi.BaseDevice_buildSkeleton(self, filename)

    def isConnected(self):
        return _PyIndi.BaseDevice_isConnected(self)

    def setDeviceName(self, dev):
        return _PyIndi.BaseDevice_setDeviceName(self, dev)

    def getDeviceName(self):
        return _PyIndi.BaseDevice_getDeviceName(self)

    def addMessage(self, msg):
        return _PyIndi.BaseDevice_addMessage(self, msg)

    def checkMessage(self, root):
        return _PyIndi.BaseDevice_checkMessage(self, root)

    def doMessage(self, msg):
        return _PyIndi.BaseDevice_doMessage(self, msg)

    def messageQueue(self, index):
        return _PyIndi.BaseDevice_messageQueue(self, index)

    def lastMessage(self):
        return _PyIndi.BaseDevice_lastMessage(self)

    def setMediator(self, med):
        return _PyIndi.BaseDevice_setMediator(self, med)

    def getMediator(self):
        return _PyIndi.BaseDevice_getMediator(self)

    def getDriverName(self):
        return _PyIndi.BaseDevice_getDriverName(self)

    def getDriverExec(self):
        return _PyIndi.BaseDevice_getDriverExec(self)

    def getDriverVersion(self):
        return _PyIndi.BaseDevice_getDriverVersion(self)

    def getDriverInterface(self):
        return _PyIndi.BaseDevice_getDriverInterface(self)
BaseDevice_swigregister = _PyIndi.BaseDevice_swigregister
BaseDevice_swigregister(BaseDevice)

class Property(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Property, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Property, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyIndi.new_Property()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyIndi.delete_Property
    __del__ = lambda self: None

    def setProperty(self, arg2):
        return _PyIndi.Property_setProperty(self, arg2)

    def setType(self, t):
        return _PyIndi.Property_setType(self, t)

    def setRegistered(self, r):
        return _PyIndi.Property_setRegistered(self, r)

    def setDynamic(self, d):
        return _PyIndi.Property_setDynamic(self, d)

    def setBaseDevice(self, idp):
        return _PyIndi.Property_setBaseDevice(self, idp)

    def getProperty(self):
        return _PyIndi.Property_getProperty(self)

    def getType(self):
        return _PyIndi.Property_getType(self)

    def getRegistered(self):
        return _PyIndi.Property_getRegistered(self)

    def isDynamic(self):
        return _PyIndi.Property_isDynamic(self)

    def getBaseDevice(self):
        return _PyIndi.Property_getBaseDevice(self)

    def getName(self):
        return _PyIndi.Property_getName(self)

    def getLabel(self):
        return _PyIndi.Property_getLabel(self)

    def getGroupName(self):
        return _PyIndi.Property_getGroupName(self)

    def getDeviceName(self):
        return _PyIndi.Property_getDeviceName(self)

    def getTimestamp(self):
        return _PyIndi.Property_getTimestamp(self)

    def getState(self):
        return _PyIndi.Property_getState(self)

    def getPermission(self):
        return _PyIndi.Property_getPermission(self)

    def getNumber(self):
        return _PyIndi.Property_getNumber(self)

    def getText(self):
        return _PyIndi.Property_getText(self)

    def getSwitch(self):
        return _PyIndi.Property_getSwitch(self)

    def getLight(self):
        return _PyIndi.Property_getLight(self)

    def getBLOB(self):
        return _PyIndi.Property_getBLOB(self)
Property_swigregister = _PyIndi.Property_swigregister
Property_swigregister(Property)

B_NEVER = _PyIndi.B_NEVER
B_ALSO = _PyIndi.B_ALSO
B_ONLY = _PyIndi.B_ONLY
# This file is compatible with both classic and new-style classes.


